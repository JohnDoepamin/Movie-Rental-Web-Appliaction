@model dynamic

@{
    ViewBag.Title = "New Rental Form";
}

<h2>New Rental Form</h2>

<form id="newRental">

    <div class="row">
        <div class="col-4">
            <div class="form-group">
                <label>Customer</label>
                <div class="tt-container">
                    <input id="customer" name="customer" data-rule-validCustomer="true" required type="text" value="" class="form-control" />
                </div>
            </div>

            <div class="form-group">
                <label>Movie</label>
                <div class="tt-container">
                    <input id="movie" name="movie" data-rule-validMovie="true" type="text" value="" class="form-control" />
                </div>
            </div>

            <button class="btn btn-primary">Submit</button>

        </div>
            <div class="col-6">
                <label>Selected Movies:</label>
                <ul id="movies" class="list-group"></ul>
        </div>
    </div>

</form>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function() {

            //Initialize empty viewmodel
            var vm = {
                movieIds : []
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                //prefetch: '../data/films/post_1960.json',
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                    minLength: 1,
                    highlight: true
                },
                {
                    name: 'customers',
                    display: 'name',
                    source: customers
                }).on("typeahead:select", function(e, customer) {
                    vm.customerId = customer.id;
                    vm.customerIsDelinquent = customer.isDelinquent;
                });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                    minLength: 1,
                    highlight: true
                },
                {
                    name: 'movies',
                    display: 'name',
                    source: movies
                }).on("typeahead:select", function(e, movie) {
                    $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");

                    $("#movie").typeahead("val", "");

                    vm.movieIds.push(movie.id);
                });

            // There is a bug within this function which does not assign the value correctly to the given validator check
            var validCustomerMessage = "error";
            jQuery.validator.addMethod("validCustomer", function () {
                if (!(vm.customerId && vm.customerId > 1)) {
                    validCustomerMessage = "Please select a valid customer.";
                    return false;
                } else if (vm.customerIsDelinquent) {
                    validCustomerMessage = "Customer is delinquent and cant rent any movies.";
                    return false;
                } else {
                    return true;
                }
            }, validCustomerMessage);
            
            $.validator.addMethod("validMovie", function () {
                return vm.movieIds.length !== 0;
            }, "Please select at least one valid movie.");

            var newRentalsError = "";
            var validator = $("#newRental").validate({
                submitHandler: function() {
                    $.ajax({
                        url: "/api/newRentals",
                        method: "post",
                        data: vm,
                        error: function (response) {
                            var JSONObject = JSON.parse(response.responseText);
                            newRentalsError = JSONObject.message;
                            //newRentalsError = response.responseText;
                            //newRentalsError = $(response).filter('responseText').text;
                        }
                    })
                    .done(function () {
                        toastr.success("Rentals successfully recorded.");

                        $("#customer").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        $("#movies").empty();

                        vm = { movieIds: [] };
                        validator.resetForm();
                        })
                    .fail(function () {
                        toastr.error(newRentalsError);
                        });
                    //Return false in order to prevent the form from being submited normally
                    return false;
                }
            });

        })
    </script>

}
